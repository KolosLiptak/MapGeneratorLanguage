package MapGen_Language.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ColorReference_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Equipment_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Field_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Fight_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Frequent_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Map_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Moderate_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new MovementModifier_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Object_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Player_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Rare_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Rules_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new TargetField_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new TargetObject_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Unreachable_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Without_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("MapGen_Language.editor.ColorableColor".equals(editorComponentId)) {
      return Collections.singletonList(new ColorableColor());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ColorReference_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new TargetField_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new TargetObject_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new Without_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20e16300L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x4368f4c8e6e9f0c5L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20e16305L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dc56b05L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dc81eb7L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20e1630aL), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dc81eb8L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20ed7740L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20e1630dL), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20e16310L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dc81eb6L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20ed7731L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dbb69d9L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dbb69dcL), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dbb69acL), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dbb69afL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20e162ffL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x29e1c30f20e16300L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dbb69d9L), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dbb69dcL), MetaIdFactory.conceptId(0x6603edcde014f88L, 0xa0d068aced597e99L, 0x20ce2a992dbb69afL)).seal();
}
